package main

import (
	"bytes"
	"encoding/base64"
	"encoding/gob"
	"fmt"
	"log"
	"my_success_diary/lib/baseutil"
	"strings"
	"time"
)

/*
* @CreateTime: 2019/12/14 16:14
* @Author: hujiaming
* @Description: 通过文件的形式存储日记
 */
const (
	headContent = "this is %s's diary_book."
	headNotes   = "this diary was generated by system."

	tailContent = "%s's story ends here."
	tailNotes   = "this diary was generated by system."
)

// head <-->my_diary...<-->tail
type Diary struct {
	ID        []byte // 某一天20191214
	PrevID    []byte // 上一条ID
	NextID    []byte // 下一条ID
	Content   []byte // 日记内容
	Notes     []byte // 备注
	Timestamp int64  // 时间戳
}

func NewDiary(content, notes string) *Diary {
	return &Diary{
		Content:   EncryptString(content),
		Notes:     EncryptString(notes),
		Timestamp: time.Now().Unix(),
	}
}
func (d Diary) String() string {
	var lines []string
	lines = append(lines, fmt.Sprintf("==== Diary %s ====", d.ID))
	lines = append(lines, fmt.Sprintf("  PrevID:   %s", d.PrevID))
	lines = append(lines, fmt.Sprintf("  NextID:   %s", d.NextID))
	lines = append(lines, fmt.Sprintf("  DateTime: %s", baseutil.FormatTimestamp(d.Timestamp)))
	lines = append(lines, fmt.Sprintf("  Content:  %s", DecryptString(d.Content)))
	lines = append(lines, fmt.Sprintf("  Notes:    %s", DecryptString(d.Notes)))
	lines = append(lines, "\n")
	return strings.Join(lines, "\n")
}
func (d Diary) SimpleString() string {
	return fmt.Sprintf("%s %s", baseutil.FormatTimestamp(d.Timestamp), DecryptString(d.Content))
}
func (d *Diary) Serialize() []byte {
	var encoded bytes.Buffer

	enc := gob.NewEncoder(&encoded)
	err := enc.Encode(d)
	if err != nil {
		log.Panic(err)
	}
	//return encoded.Bytes()
	//return Base58Encode(encoded.Bytes())
	return []byte(base64.StdEncoding.EncodeToString(encoded.Bytes()))
}
func DeserializeDiary(b []byte) *Diary {
	var diary Diary

	d,err := base64.StdEncoding.DecodeString(string(b))
	decoder := gob.NewDecoder(bytes.NewReader(d))

	err = decoder.Decode(&diary)
	if err != nil {
		log.Panic(err)
	}
	return &diary
}

// head节点是整个日记链的开头，为了方便检索，它的ID是固定的
func NewHead(name string) *Diary {
	diary := &Diary{
		Content:   EncryptString(fmt.Sprintf(headContent, name)),
		Notes:     EncryptString(headNotes),
		Timestamp: time.Now().Unix(),
	}

	//diary.SetID(time.Now())
	return diary
}
func NewTail(name string) *Diary {
	diary := &Diary{
		Content:   EncryptString(fmt.Sprintf(tailContent, name)),
		Notes:     EncryptString(tailNotes),
		Timestamp: time.Now().Unix(),
	}

	//diary.SetID(time.Now().Add(time.Second))
	return diary
}

// 设置当前日记的ID(t为创建时间的时间戳)
func (d *Diary) SetID(t time.Time) {
	d.ID = []byte(GetDiaryID(t))
}

func GetDiaryID(t time.Time) string {
	return t.Format("20060102150405")
}
